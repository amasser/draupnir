---
version: 2

references:
  bundle_install: &bundle_install
    run:
      name: Bundle
      command: bundle install --path vendor/bundle --jobs=4 --retry=3
  cache_bundle_for_lockfile: &cache_bundle_for_lockfile
    save_cache:
      key: v3-ruby2.4.1-Gemfile-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle
  cache_bundle: &cache_bundle
    save_cache:
      key: v3-ruby2.4.1-Gemfile
      paths:
        - vendor/bundle
  restore_bundle: &restore_bundle
    restore_cache:
      keys:
        - v3-ruby2.4.1-Gemfile-{{ checksum "Gemfile.lock" }}
        - v3-ruby2.4.1-Gemfile
  docker_build_image: &docker_build_image
    docker:
      - image: gocardless/draupnir-circleci:latest
    working_directory: /go/src/github.com/gocardless/draupnir
  docker_golang: &docker_golang
    docker:
      - image: golang:1.14
    working_directory: /project

jobs:
  unit:
    <<: *docker_build_image
    environment:
      TEST_RESULTS: /tmp/test-results
      GOPATH: /go
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - run: make test

  check-deps-updated:
    <<: *docker_golang
    steps:
      - checkout
      - run: go mod download
      - run: env GOPROXY=off go build -mod=readonly ./...
  check-deps-tidy:
    <<: *docker_golang
    steps:
      - checkout
      - run: go mod tidy
      - run: |
          if ! git diff --exit-code -- go.mod go.sum; then
            echo "Modules not tidy; please run 'go mod tidy'";
          fi;

  rubocop:
    docker:
      - image: circleci/ruby:2.4.2
    working_directory: ~/draupnir
    steps:
      - checkout
      - run: bundle install
      - run: bundle exec rubocop

  build-linux:
    <<: *docker_build_image
    environment:
      GOPATH: /go
    steps:
      - checkout
      - run:
          name: Build linux binary
          command: make build-production
      - persist_to_workspace:
          root: /go/src/github.com/gocardless/draupnir
          paths: ['*.linux_amd64']

  integration:
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - restore_cache:
          key: dependency-cache-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Ruby bundle
          command: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3
      - run:
          name: Pull draupnir base image
          command: docker pull gocardless/draupnir-base
      - run:
          name: Run integration tests
          command: cp workspace/*.linux_amd64 ./ && make test-integration

  release:
    <<: *docker_build_image
    environment:
      GOPATH: /go
    steps:
      - checkout
      - run:
          name: Release
          command: |
            CURRENT_VERSION="v$(cat DRAUPNIR_VERSION)"

            if [[ $(git tag -l "${CURRENT_VERSION}") == "${CURRENT_VERSION}" ]]; then
              echo "Version ${CURRENT_VERSION} is already released"
              exit 0
            fi

            curl -L -o /tmp/goreleaser_Linux_x86_64.tar.gz https://github.com/goreleaser/goreleaser/releases/download/v0.101.0/goreleaser_Linux_x86_64.tar.gz
            tar zxf /tmp/goreleaser_Linux_x86_64.tar.gz -C /tmp

            git log --pretty=oneline --abbrev-commit --no-decorate --no-color "$(git describe --tags --abbrev=0)..HEAD" -- pkg cmd vendor internal > /tmp/release-notes
            git tag "${CURRENT_VERSION}"

            /tmp/goreleaser --rm-dist --release-notes /tmp/release-notes
            git push --tags

workflows:
  version: 2
  build-integration:
    jobs:
      - unit
      - rubocop
      - build-linux
      - check-deps-tidy
      - check-deps-updated
      - integration:
          requires:
            - build-linux
      - release:
          requires:
            - integration
          filters:
            branches:
              only:
                - master
